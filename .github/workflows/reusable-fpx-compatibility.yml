name: 'Ensure fpx Compatibility'

on:
  workflow_call:
    inputs:
      component_name:
        description: 'Name of the component to test for fpx compatibility'
        required: true
        type: string

jobs:
  ensure-fpx-compatibility:
    runs-on: ubuntu-latest
    #add a comment to have a commit hash to reference to
    steps:
      - name: Checkout component repository
        uses: actions/checkout@v5

      - name: Setup flutter
        uses: subosito/flutter-action@v2
        with:
            channel: stable

      - name: Install fpx globally
        run: dart pub global activate fpx

      - name: Add pub global bin to PATH
        run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

      - name: Verify fpx installation
        run: fpx --version

      - name: Create test Flutter project
        run: |
          # Create test project in runner temp directory to avoid circular copy issues
          flutter create --template=app "$RUNNER_TEMP/test_project"

      - name: Get repository name from GitHub repository
        id: get_repo_name
        run: |
          REPO_NAME="${{ github.repository }}"
          # Extract just the repo name (remove owner/)
          REPO_NAME=${REPO_NAME##*/}
          echo "repository_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "Using repository name: $REPO_NAME"

      - name: Copy checked-out repository to fpx repositories folder
        run: |
          cd "$RUNNER_TEMP/test_project"
          # Create .fpx_repositories directory if it doesn't exist
          mkdir -p .fpx_repositories
          # Copy the current repository (already checked out by actions/checkout) to fpx repositories
          # Exclude the .fpx_repositories directory itself to avoid circular copies
          rsync -av --exclude='.fpx_repositories' "${{ github.workspace }}/" ".fpx_repositories/${{ steps.get_repo_name.outputs.repository_name }}/"
          echo "Repository copied to .fpx_repositories/${{ steps.get_repo_name.outputs.repository_name }}"

      - name: Update repository to re-process cloned repo
        run: |
          cd "$RUNNER_TEMP/test_project"
          fpx repository update --no-pull

      - name: List available components
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "Available components:"
          fpx list

      - name: Add component to test project
        id: add_component
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "Adding component: ${{ inputs.component_name }}"
          fpx add "${{ inputs.component_name }}" --path lib/components
        continue-on-error: false

      - name: Check component files
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "Files created:"
          find lib/components -name "*.dart" -type f | head -20
          
      - name: Analyze dependencies with dart analyze
        id: analyze_deps
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "Running dart analyze to check for dependency issues..."
          dart analyze 2>&1 | tee analyze_output.txt || true
          
          # Check if there are any missing dependency errors
          if grep -q "package:" analyze_output.txt; then
            echo "Found potential dependency issues:"
            grep "package:" analyze_output.txt || true
            echo "dependency_issues=true" >> $GITHUB_OUTPUT
          else
            echo "No dependency issues found"
            echo "dependency_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Extract third-party dependencies
        id: extract_deps
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "Extracting dependencies from component files..."
          
          # Find all dart files in the component
          component_files=$(find lib/components -name "*.dart" -type f 2>/dev/null || echo "")
          
          if [ -z "$component_files" ]; then
            echo "No component files found"
            echo "third_party_deps=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Extract import statements that reference packages (excluding standard Flutter/Dart)
          third_party_imports=""
          for file in $component_files; do
            # Extract package imports, excluding standard Flutter/Dart packages
            imports=$(grep -E "^import 'package:" "$file" 2>/dev/null | \
                     grep -v "package:flutter/" | \
                     grep -v "package:meta/" | \
                     grep -v "package:material/" | \
                     grep -v "package:cupertino/" | \
                     grep -v "package:widgets/" | \
                     sed "s/import 'package:\([^\/]*\)\/.*/\1/" | \
                     sort -u || true)
            
            if [ -n "$imports" ]; then
              third_party_imports="$third_party_imports $imports"
            fi
          done
          
          # Remove duplicates and format
          unique_deps=$(echo "$third_party_imports" | tr ' ' '\n' | sort -u | grep -v "^$" | tr '\n' ',' | sed 's/,$//')
          
          echo "third_party_deps=$unique_deps" >> $GITHUB_OUTPUT
          
          if [ -n "$unique_deps" ]; then
            echo "Third-party dependencies found: $unique_deps"
          else
            echo "No third-party dependencies found (component uses only Flutter/Dart standard libraries)"
          fi

      - name: Test compilation
        id: test_compile
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "Testing component compilation..."
          
          # Try to compile the project
          if flutter analyze --no-pub; then
            echo "Component compiles successfully"
            echo "compilation_success=true" >> $GITHUB_OUTPUT
          else
            echo "Component compilation failed"
            echo "compilation_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for README with dependencies
        run: |
          cd "$RUNNER_TEMP/test_project"
          readme_files=$(find lib/components -name "README.md" -type f 2>/dev/null || echo "")
          
          if [ -n "$readme_files" ]; then
            echo "Found README files with dependency information:"
            for readme in $readme_files; do
              echo "=== $readme ==="
              cat "$readme"
              echo ""
            done
          else
            echo "No README files found in component"
          fi

      - name: Generate fpx compatibility report
        run: |
          cd "$RUNNER_TEMP/test_project"
          echo "## fpx Compatibility Report" > fpx_compatibility_report.md
          echo "" >> fpx_compatibility_report.md
          echo "**Component:** ${{ inputs.component_name }}" >> fpx_compatibility_report.md
          echo "**Repository:** ${{ github.repository }}" >> fpx_compatibility_report.md
          echo "**Commit:** ${{ github.sha }}" >> fpx_compatibility_report.md
          echo "" >> fpx_compatibility_report.md
          
          if [ "${{ steps.add_component.outcome }}" = "success" ]; then
            echo "✅ **fpx Component Installation:** Success" >> fpx_compatibility_report.md
          else
            echo "❌ **fpx Component Installation:** Failed" >> fpx_compatibility_report.md
          fi
          
          if [ "${{ steps.test_compile.outputs.compilation_success }}" = "true" ]; then
            echo "✅ **Component Compilation:** Success" >> fpx_compatibility_report.md
          else
            echo "❌ **Component Compilation:** Failed" >> fpx_compatibility_report.md
          fi
          
          if [ "${{ steps.analyze_deps.outputs.dependency_issues }}" = "false" ]; then
            echo "✅ **Dependency Analysis:** No issues found" >> fpx_compatibility_report.md
          else
            echo "⚠️ **Dependency Analysis:** Issues detected" >> fpx_compatibility_report.md
          fi
          
          if [ -n "${{ steps.extract_deps.outputs.third_party_deps }}" ]; then
            echo "" >> fpx_compatibility_report.md
            echo "**Third-party Dependencies Required:**" >> fpx_compatibility_report.md
            echo "\`\`\`" >> fpx_compatibility_report.md
            echo "${{ steps.extract_deps.outputs.third_party_deps }}" | tr ',' '\n' >> fpx_compatibility_report.md
            echo "\`\`\`" >> fpx_compatibility_report.md
          else
            echo "" >> fpx_compatibility_report.md
            echo "**Dependencies:** Component only uses Flutter/Dart standard libraries" >> fpx_compatibility_report.md
          fi
          
          echo "" >> fpx_compatibility_report.md
          echo "**Generated on:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> fpx_compatibility_report.md
          
          cat fpx_compatibility_report.md

      - name: Upload fpx compatibility artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: fpx-compatibility-results-${{ inputs.component_name }}
          path: |
            ${{ env.RUNNER_TEMP }}/test_project/analyze_output.txt
            ${{ env.RUNNER_TEMP }}/test_project/fpx_compatibility_report.md
            ${{ env.RUNNER_TEMP }}/test_project/lib/components/**/*.dart
            ${{ env.RUNNER_TEMP }}/test_project/lib/components/**/README.md
          retention-days: 30

    outputs:
      fpx_compatible: ${{ steps.add_component.outcome == 'success' }}
      component_installed: ${{ steps.add_component.outcome == 'success' }}
      compilation_success: ${{ steps.test_compile.outputs.compilation_success }}
      has_dependency_issues: ${{ steps.analyze_deps.outputs.dependency_issues }}
      third_party_dependencies: ${{ steps.extract_deps.outputs.third_party_deps }}
